======================================================================================================
======================================================================================================

OBJECT INTERFACES AND BEHAVIOURS

Please note that this section is meant strictly to describe how general object interfaces interact
with each other. For documentation on how to use the object classes or abstraction classes available,
please refer to the files in game_objects, which outlines constructors and significant methods that
are associated with the objects themselves.

Object interfaces control and standardize the way that objects can be interacted with, be it through
the main game loop or by other game objects. This is particularly important for giving a generic means
of calling the collision method associated with an object, as well 

It has also come to my attention that some of you may not know what an Object Interface is, nor what
Object Inheritance is. Please look this up on your own. They are both very important concepts to any
OOP-based environment. This is particularly concerning considering that Java is nothing but OOP, and
very strict OOP at that.

You may find the word "Entity" be used throughout this section of the documentation. An Entity is a
type of game object that interacts with the SolidObjects of the game through the interfaces defined
below. It is described in much greater detail in the object_superclasses section.

(*)	)=================================================================================================

	dmcigd.core.objects.interfaces.GameObject.java
	
	This interface controls low-level methods associated with an in-game object, defining methods that
	are associated with rendering and repositioning an object. The purpose of this interface is to
	serve as a superinterface for all game object interfaces to inherit from.
	
	METHODS
	
		COLLISION
			
		->	CollisionType getCollisionType()
				returns a CollisionType enumerator used in collision checks
				
		->	Rectangle getBounds(int vx, int vy)
				returns a bounding box rectangle of the object's destination
				
		->	Rectangle getBounds()
				returns a bounding box rectangle of the object's current location
			
		IMAGE RESOURCES
						
		->	String getImagePath()
				returns an imagePath string as explained in the Image Map section of the game_loop
				file
				
		DIMENSIONS
			
		->	int getX()
				returns the x position
				
		->	int getY()
				returns the y position
			
		->	int getWidth()
				returns the bounding box width
				
		->	int getHeight()
				returns the bounding box height
				
		->	int getImageWidth()
				returns the image (display) width
				
		->	int getImageHeight()
				returns the image (display) height
				
		->	int getSequence()
				returns the current animation sequence (tilesheet row)
				also useful for determining an object's state
					i.e. what action it is currently performing
				
		->	int getFrame()
				returns the current animation frame (tilesheet column)
				also useful for determining an object's state
					i.e. how far it is along its action
					
		DISPLAY
		
		->	boolean isVisible(int x, int y)
				determines if the object is visible from the current view (player) position
				
		->	ObjectImage getObjectImage(int x, int y)
				returns an ObjectImage class holding the image map code and all associated positions
				more information on the ObjectImage class in the extra_information file
				
		STEP
		
		->	void step()
				generic method that determines what action the object will take each frame

(*)	)=================================================================================================

	dmcigd.core.objects.interfaces.SolidObject.java
	
		extends dmcigd.core.objects.interfaces.GameObject.java
		
	The SolidObject interface is an extension of the GameObject interface that handles collision with
	all Entities, in contrast to the Region class which handles only collision with the Player.java
	instance. It inherits the collision check methods from GameObject.java and adds collision events
	that Entities or other SolidObjects such as projectiles can call in the game loop.
	
	METHODS
	
	->	boolean isDestroyed()
			Checks to see if the object should be removed from the game
			
			Handled by the Room.java game loop, but can also be used to check if an interaction
			destroyed the object (e.g. item disappearing on contact with its corresponding object)
		
	->	public void onPush(Entity entity, int v)
			Calls a method when an entity collides at a certain horizontal velocity.
			
			Passing of entity object allows for dynamic object manipulation, as well as checking the
			entity properties to determine which collision subroutine to call.
			
			The velocity integer allows for the object to determine speed-dependent collision
			properties, and also infer direction
		
	->	public void onAttack(int damage, boolean flipped)
			Special collision property that deals with the Sword.java instance. Used for taking damage
			on applicable objects, such as monsters.
			Damage is dependent on current sword value, and flipped determines direction of attack (in
			case of direction-sensitive damage)

(*)	)=================================================================================================

	dmcigd.core.objects.interfaces.RestableObject.java
	
		extends dmcigd.core.objects.interfaces.SolidObject.java
	
	This is nothing more than an extension of the SolidObject interface, but introduces the onRest()
	and onUnrest() methods. This is necessary to enable typical object behaviours as collision based
	on gravity and jumping are usually treated differently from pushing horizontally.
	
	Please note that there is no way to handle collision from underneath (i.e. Mario-style headbutting
	or bricks) as I did not feel it was necessary to implement into the behaviour of Entities. If
	absolutely necessary, I will modify the game loop to account for this, however I am hoping that it
	will not be necessary.
	
	Although it should be self-explanatory:
	
	METHODS
	
	->	void onRest()
			is called when an Entity lands on a RestableObject
	
	->	void onUnrest()
			is called when an Entity is no longer resting on said RestableObject
			e.g. when a player jumps off a block

(*)	)=================================================================================================

	dmcigd.core.objects.interfaces.Item.java
	
		extends dmcigd.core.objects.interfaces.SolidObject.java
		
	Items extend the SolidObject interface due to shared methods, however, an Item does not behave
	like a SolidObject, but rather behaves purely as an Entity and basic projectile, that can be held
	by the player. As such, Items are stored in their own linked list, and, like projectiles, have
	one-way collision checks. Specifics on how Items and Projectiles behave can be found in both the
	object_superclasses and game_loop files.
	
	As such, the Item interface adds the following self-explanatory setters for control:
	
	METHODS
	
	->	void setX(int x)
			sets the x position
			
	->	void setY(int y)
			sets the y position
			
	->	void setVX(float vx)
			sets the x velocity
			
	->	void setVY(float vy)
			sets the y velocity
			
	->	void setHeld(boolean held)
			sets the held boolean
			controls whether or not the object behaves as an entity or a non-moving object, as a held
			object's position is controlled entirely by the player's position

(*)	)=================================================================================================

	dmcigd.core.objects.interfaces.Region.java
	
		extends dmcigd.core.objects.interfaces.GameObject.java
		
	The real factor that sets apart a Region from a SolidObject is the fact that a Region is non-solid
	and therefore has much simpler methods associated with it. What really sets apart Regions in the
	actual game is the fact that Regions only interact with the Player, and that Regions can contain
	not only collision (hover) methods, but also "interaction" methods called by pressing the "X" key.
	
	Because of this regions are used for things such as doors/pathways, invisible warp areas, and npcs
	and introduce the following methods:
	
	METHODS
	
	->	void onHover(Player player)
			generic method to handle collision
			
	->	void interact(Player player)
			generic method to handle player interaction (pressing "X")
			
	It is important to note that there is no onUnhover method, and this has to do with the workings of
	the Player class and the way it handles region collision. However, with proper design patterns,
	this should be a non-issue considering that a step() method, inherited from the GameObject.java
	interface runs every frame. Through the use of booleans that reset themselves with each frames,
	and the fact that Regions call their step() method after the Player does, theoretical onUnhover
	methods can be emulated in the step() method.