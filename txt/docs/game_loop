======================================================================================================
======================================================================================================

*=============================*
*=============================*
*==NONE OF THE DOCUMENTATION==*
*==ACCOUNT FOR CUTSCENES YET==*
*==PLEASE REMEMBER TO UDPATE==*
*=============================*
*******************************
(when cutscenes are done, of course)


THE CORE CLASSES

The game loop is handled by 3 main files:

Double Buffering:			dmcigd.DmciGD.java
Object and Input Handler:	dmcigd.Main.java
Gameplay Loop:				dmcigd.core.room.Room.java

These three objects are what handle every other object in the game. The first two handle low-level
game structure, just getting all of the game objects on screen and actually executing the information
it receives from other classes.

As a level designer, your primary concern is to deal with dmcigd.core.room.Room.java as the level
classes themselves, and the logic associated with the various game objects and interfaces


(*)	)=================================================================================================

	dmcigd.DmciGD.java
	
	This file handles the double buffering script. This is the object that actually draws the pixels
	onto the screen. It shares a consumer/producer relationship with the Main.java class, and from
	the Main.java class, it receives all information on the current game state and list of visible
	objects to draw on screen.
	
	It is important to note that this file is an absolute mess. Due to limitations with Java's Applet
	library (as we do value the distribution benefits of being a browser-based game), it becomes very
	difficult to properly abstract out rendering into several classes, unlike using a library such as
	Swing, as verbose as it may be.
	
	Please note that knowledge of this object is not necessary to work on the game, as long as you
	adhere to the requirements of the Room.java class. The information on this class is strictly for
	general information.
	
	It is also important to note that I have had no previous experience working with games or Applets,
	so it is possible that this class is much more convoluted and contrived than need be.
	
	If this isn't actually a fault with Applet, and it turns out that Hussain and I just couldn't
	figure out how to make proper use of it, please teach us your ways.
	
		PUBLIC METHODS AND PROPERTIES
		
		This object naturally has no methods associated with it that would run outside of the class,
		as it is the root class of the game.
		
		OBJECT PROCEDURE
		
			INIT
		
		1.	Upon object initialization, this class creates an instance of Main.java
		
			Along with creating this instance, it must also pass down the appropriate properties and
			resources. It passes down the codeBase URL which is used for file reading, especially
			important for web implementation.
			
			It must also synchronize gameStates, adds the key listener to the Main.java instance so
			that it can register inputs, and initialize the Consumer/Producer relationship via the
			ThreadSync.java class. For a little more information on the Consumer/Producer relationship
			to deal with multi-threading, see the extra_information file.
			
		2.	The object must also initiate all properties associated with image rendering. This means
			loading all information regarding spritesheet locations, as image information is stored in
			spritesheets rather than individual sprites to cut down on HTTP requests. This also opens
			the possibility of the mathematical manipulation of sprites, such as adding a certain
			value to the Y coordinate to load an alternate set of sprites within the same sheet.
			
			It also must, ironically, preload a loading image at this point.
			
			Since the Sword.java instance is not stored in any ArrayList, and therefore not loaded in
			the typical object image preloader described below, it must be loaded once upon
			initialization.
			
			It also loads the font from a TTF file in the /share/ directory and creates the relevant
			font object for text rendering.
			
			RUN (LOOPS CONTINUOUSLY IN OWN THREAD)
			
		1.	For every iteration of the run loop, the object first synchronizes it's GameState with
			that of the main class.
			
		2.	GAMEPLAY:
				If the gameState doesn't match, this means that the level just loaded. The game now
				preloads the tileset and background image, and loops through all of the objectLists
				and preload their images based on their image path and associated mapCode. More
				information on the image map below
				
				Otherwise, the instance synchronizes a list of visible ObjectImage objects, which
				contains object mapcodes, source locations (current sequence and frame), location and
				dimensions.
				
				Also synchronizes a list of TextLabel objects and their locations.
				
			LOADINGROOM:
				Directly call the repaint();
				
			DIALOGUE:
				Check the current DialogueItem of the DialogueHandler dh, and synchronize the avatar's
				image mapcode as well as the name and the three lines of text.
				
			DEFAULT:
				Synchronizes the gameState and tells the loop to render a single frame.
				
		3.	After consumption actions are taken, an repaint(); and wait(); method are called. This is
			important in ensuring that only one paint(); is called per repaint();, avoiding queuing up
			a bunch of paint(); calls for no reason.
			
		4.	On paint, the method draws the appropriate objects onto a double-buffering image that is
			size of the screen
		
		5.	GAMEPLAY:
				Draw a 640x320 background to clear the previous frame
		
				The visible characters of the environment are matched to their according image and
				spritesheet location and drawn on the screen.
				
					The position is based on the current offset of the Player from the 32x32 grid,
					calculated using a special kind of modulo that handles the offset of the grid to
					the screen as well.
					
					[Remind me to add a mathematical example here]
				
				The same steps are taken for the blockmap (rendering it on top of the visible objects)
				
				All visible objects are drawn onto the screen using their according image resource and
				spritesheet location.
				
				The source location of the sprite, that is, which section of the spritesheet to draw,
				is determined by the ObjectImage's sequence and frame. These act as a y and x position
				respectively, which is multiplied by the image's height and width.
				
				e.g. a 20x30 sprite at sequence 2 and frame 4 would return the following source:
				
						x = (20 * 4) -> (20 * 4) + 20
						  = 80 -> 80 + 20
						  = 80 -> 100
						  
						y = (30 * 2) -> (30 * 2) + 30
						  = 60 -> 60 + 30
						  = 60 -> 90
				
				Positions are calculated by the ObjectImage class, and are compared to the view
				position (Player position) such that the coordinates represent a pixel near the center
				of the screen (the top left pixel of the player)
					
					[Remind me to add a mathematical example here]
				
				All text labels are then drawn out based on their according font size and string
				
			DIALOGUE:
				Draws a 640x110 dark grey box along the bottom of the screen
				
				If the dialogue item contains an avatar, draw a 128 x 128 box and render the avatar
				image to the bottom right.
				
				Given the current offset (centered usually, or set to the left if there is an avatar)
				draw the name and three lines of text.
				
				Draw 'PRESS "X" TO CONTINUE' to the bottom right of the dialogue with a shadow.
				
			LOADINGROOM:
				Render and iterate the loading animation.
				
			PAUSE:
				Draw a translucent black overlay over the previous frame.
				Render out the following text with shadows:
					"[ PAUSED ]"
			
			GAMEOVER:
				Draw a translucent black overlay over the previous frame.
				Render out the following text with shadows:
					"[ GAME OVER ]"
					'PRESS "R" TO RESET'
				
		6. The offscreen image is drawn to the screen and the thread loop is notified to resume.
		
		OTHER NOTES
		
		*********************************************************************
		**PLEASE NOTE: THIS INFORMATION IS IMPORTANT TO THE LEVEL DESIGNERS**
		*********************************************************************
		
		The only aspect that the level designers need to worry about is the image map. This is what
		allows the applet to properly load image resources, again, due to the limitations of Applet
		and the problems associated with loading and passing an image resource directly.
		
		As such, the images are all loaded, and for that matter, preloaded (which pauses the game) by
		the DmciGD.java instance.
		
		The blockmap and environmentmap image resources are saved in a single spritesheet called the
		tileset, and has a constant image resource associated with them.
		
		All other objects have their image resources stored in a hashmap associating their file path
		String to the loaded image resource.
			
		This information is referenced through the getImagePath() method found in the
		VisibleObject.java class, and required by the GameObject.java interface
			
		This imagemap is totally dynamic and is loaded at the beginning of the level (loops through
		all objects and fetches the associated image from the path).
		
		It is important to note that this is only run upon initialization, so if an object is not
		initialized by generated (e.g. a projectile), ensure that you create an instance of it in a
		controlled area out of sight to ensure that it gets loaded. Or, you could simply store the
		image in the same spritesheet as its parent (i.e. placing all child object sprites as an
		unreferenced sequence in the spritesheet)
	
(*)	)=================================================================================================
	
	dmcigd.Main.java
	
	This file handles the low-level game logic. It controls the loading of levels, including the
	initialization of a level instance, the handling of the current GameState (i.e. paused, gameover,
	loadingroom, gameplay, dialogue), as well as the advancement of game frames (i.e. the step()
	method)
	
		PUBLIC METHODS AND PROPERTIES
		
		This object contains a few properties that are passed only to the DmciGD.java class, as the
		instance of Main.java handles only low-level functionality such as handling the rooms, pausing
		the game, and later on, handling sound.
		
		[SOUND IS NOT YET IMPLEMENTED, UPDATE DOCUMENTATION WHEN IT IS READY]
		
		->	GameState getGameState()
		
			This method should be completely self-explanatory. It returns the current GameState, as
			defined by the GameState enumerator, which is also self-explanatory.
			
			These GameStates are as follows:
			
				GAMEOVER, PAUSE, LOADINGROOM, GAMEPLAY, DIALOGUE
				
			And each of these gameStates must be handled and passed on to DmciGD.java so that it knows
			how to render the frame.
			
		->	boolean getDecayState()
		
			This method returns a boolean value that tells the DmciGD.java whether it should render a
			decayed tileset (offset by 5 vertically, due to the setup of the tilesheet images) or an
			ordinary tilesheet.
			
			This boolean is determined through the use of an in-object clock and pseudo-random numbers
			that depend on the current killCount integer.
			
		->	Room getRoom()
		
			This method returns the current instance of the Room class, as described below.
			
		OBJECT PROCEDURE
		
			INIT
			
		1.	Upon object initialization, the instance of Main.java receives a codeBase URL and stores
			it as a private property to be passed down to any objects that need to load a resource.
			
		2.	After dealing with the codeBase URL, the instance begins the ThreadSync.java process as
			mentioned above (and elaborated on below), initializes its own thread, begins loading the
			first room, which is always game.MainMenu (as the game uses rooms as menus), and sets the
			gameState to LOADINGROOM
			
			RUN (LOOPS CONTINUOUSLY IN OWN THREAD)
			
		1.	Runs a produce call to wait for the DmciGD.java to finish copying the information about
			the previous frame.
			
		2.	Checks the current gameState and takes the appropriate action:
		
			GAMEPLAY:
				Checks to see if the level has ended for any reason (by checking the isDead() method)
					If so, change the state to GAMEOVER
					
				Checks to see if dialogue has been initialized (by checking the inDialogue() method)
					If so, change the state to DIALOGUE
					
				Checks to see if the room has changed (by checking the getTargetRoom() method)
					If so, load the according room (which changes the state to LOADINGROOM)
					and add the accumulated killCount of the room (stored in the Sword.java instance)
					
				If the state does not change, call the room's step() method (as elaborated on below in
				the Room.java class explanation)
				
				Iterate the decayTimer to determine if the tileset is currently in a state of decay or
				not, as determined by the sum of the current killCount and the temporary killCount
				(stored in the Sword.java instance).
				
			LOADINGROOM:
				Checks the room instance to see if it is loaded (by checking the isReady() method)
					If so, change the state to GAMEPLAY
					
			DIALOGUE:
				Checks to see if the room is in dialogue (by checking the inDialogue() method)
					If not, resume the GAMEPLAY state
					
		3.	Runs a produced call to tell the DmciGD.java thread that it has finished producing a new
			frame
		
		OTHER NOTES
		
		The instance of main also handles key events, as such it is important to understand what each
		key does.
		
		"Q" Key:
			Quits the game by loading the room game.MainMenu
			
		"R" Key:
			Resets the room by loading the room [currentlevel].[currentRoom] (creates a new instance
			of the current room object)
			
		"P" Key:
			Pauses and unpauses the game by calling the pause() method.
			
			If the game is not paused, that is, the gameState != GameState.PAUSE, then it will save
			the current gameState (so that it knows what to resume to), and changes the gameState to
			PAUSE
			
			If the game is paused, it will unpause the game by changing the gameState to the
			aforementioned saved gameState (e.g. changing from PAUSE to DIALOGUE)
			
		Default:
			Pauses the KeyEvent to the room object if one is initialized and ready to use, that is,
			the gameState is either in DIALOGUE or GAMEPLAY.
			
		As you can see from the documentation, the Main.java class strictly deals with the GameState
		and other low-level game functionality. It has little to do with the actual gameplay logic,
		and is merely a broker for other objects. The DmciGD.java class handles drawing the objects or
		frames on screen, while the Room.java class actually handles the game objects.
		
	
(*)	)=================================================================================================
	
	dmcigd.core.room.Room.java
	
		extends dmcigd.core.room.GameObjectHandler.java
	
	This file handles all the gameplay logic, as well as any methods and properties associated with
	the room instance.
	
	It also inherits from the GameObjectHandler.java class which, as the name suggests, handles all of
	the game objects, linked lists, and iterators associated with a gameplay instance.
	
	Although this object creates it's own thread, said thread is used only for initialization, and is
	only run once. Frame progression is run in the Main.java loop, and is called from a public step()
	method.
	
		PUBLIC METHODS AND PROPERTIES
	
			PUBLIC GAME OBJECT GETTERS (SELF-EXPLANATORY)
			
			->	ArrayList<SolidObject> getSolidObjects()
					returns a linked list solidObjects
			
			->	ArrayList<Item> getItems()
					returns a linked list items
			
			->	ArrayList<SolidObject> getProjectiles()
					returns a linked list projectiles
			
			->	ArrayList<Region> getRegions()
					returns a linked list regions
			
			PUBLIC GAME OBJECT SETTERS (SELF-EXPLANATORY)
			
			->	void addSolidObject(SolidObject solidObject)
					appends an item to the solidObjects linked list
			
			->	void addItem(Item item)
					appends an item to the items linked list
			
			->	void addProjectile(SolidObject projectile)
					appends an item to the projectiles linked list
			
			->	void addRegion(Region region)
					appends an item to the regions linked list
					
			->	void addTextLabel(TextLabel textLabel)
					appends an item to the textLabels linked list
					
			->	void addBackgroundObject(VisibleObject backgroundObject)
					appends an item to the backgroundObjects linked list
					
			->	void addForegroundObject(VisibleObject foregroundObject)
					appends an item to the foregroundObjects linked list
			
			->	void initializeSolidObjects()
					abstract method called during object initialization used to initialize items in
					the solidObjects linked list
			
			->	void initializeNonsolidObjects()
					abstract method called during object initialization used to initialize items in
					the items, regions, and textLabels linked lists
			
			STATUS GETTERS
			
			->	boolean isReady()
					returns false while the room is loading, returns true when the level is done
					loading. Used so that the main game loop can continue to run while a level
					is loading.
			
			->	boolean isDead()
					returns true when a room is terminated. This is typically caused by the player's
					death, but can in theory be manipulated by other causes (i.e. failing a necessary
					level condition, as coded in the specific room subclasses)
					
			->	String getTargetRoom()
					usually returns null
					
					If instruction is sent to load a new room, which is usually done by manipulating
					the player class by setting it's level and room properties, the respective String
					is returned.
					
					In theory, this value can also be manipulated directly by the Room.java instance,
					should room advancement be met by specific game conditions rather than player
					position and collision
					
			->	String getTileset()
					returns tileSet String (determines which spritesheet to use for game tiles)
					In theory it is possible to change the tileset in the middle of a game, although
					full implementation of that is currently not available (as the tileset is checked
					only on level initialization)
					
			SPECIAL OBJECT AND LIST GETTERS
			
			For more information on the specific objects, refer to special_objects file
					
			->	Player getPlayer()
					returns Player.java instance
					
			->	BlockMap getBlockMap()
					returns BlockMap.java instance for current room
					
			->	EnvironmentMap getEnvironmentMap()
					returns EnvironmentMap.java instance for current room
					used only by the rendering script as no interactions take place with the
					environment map
					
			->	DialogueHandler getDialogueHandler()
					returns the DialogueHandler.java instance of current 
			
			->	ArrayList<ObjectImage> getVisibleObjects()
					returns list of visible ObjectImages, recalculated with each frame
					for more info on the ObjectImage.java class, refer to extra_information
			
			->	ArrayList<TextLabel> getTextLabels()
					returns list of textLabels
					
			->	ArrayList<TextLabel> getBackgroundObjects()
					returns list of backgroundObjects
					
			->	ArrayList<TextLabel> getForegroundObjects()
					returns list of foregroundObjects
			
		OBJECT PROCEDURE
			
			CONSTRUCTION
			This procedure is called when the object is created:
			
			1.	Set the codeBase URL to be passed onto the blockMap and environmentMap objects (which
				is used to load the appropriate textfile resources)
				
			2.	Set the levelName, roomName, and tileSet Strings so that information about the room is
				stored in the object, and can be referenced from other low-level objects.
				
			3.	Initialize the thread. This initialization procedure handles level loading in parallel
				to the rest of the game loop.
			
			INITIALIZATION (RUNS IN PARALLEL THREAD)
			
			4.	Initialize a BlockMap object by calling the loadBlockMap method with the codeBase URL,
				levelName String, and roomName String:
					
					Creates bufferedReader of share/txt/maps/[levelName]/[roomName]/blockmap.txt
					
						Loop through lines and create an ArrayList<String> based on the lines,
						effectively creating a 2D char array
						
						Search for the character "1" to determine the spawn location
					
					Close the bufferedReader
			
			5.	Initialize an EnvironmentMap object by calling the loadEnvironmentMap methyod with the
				codeBase URL, levelName String, and roomName String:
					
					Creates bufferedReader of share/txt/maps/[levelName]/[roomName]/environmentmap.txt
					
						Loop through lines and create an ArrayList<String> based on the lines,
						effectively creating a 2D char array
					
					Close the bufferedReader
				
			6.	Instantiate a new Player based on the BlockMap instance's spawn location, passing down
				the BlockMap instance, as well as all linked lists.
				
			7.	Run the subclass-defined initializeSolidObjects() method, and append the Player.java
				instance to the solidObjects linked list.
				
			8.	Run the subclass-defined initializeNonsolidObjects() method
			
			9.	Fetch visible objects (as explained below) and set the ready state to true.
			
			STEP
			This procedure is called with every frame, and thus every iteration of the thread loop in
			Main.java, as long as the gameState is set to GAMEPLAY
			
			1.	Calls the stepGameObjects() method from the GameObjectHandler.java superclass:
			
					Loops through all projectiles and calls their step methods
						If a projectile is destroyed, remove object from list
					
					Loops through all solidObjects and calls their step methods
						If solidObject is destroyed, remove object from list
					
					Loops through all items and calls their step methods
						If item is destroyed, remove object from list
					
					Loops through all regions and calls their step methods
				
				For more information on general behaviours of GameObjects, refer to the file
				object_superclasses, which is crucial to understanding the game logic, as the instance
				of Room.java handles as a broker for GameObjects, and does little in actual object
				manipulation. Rather, objects manipulate each other.
				
				For specific information on how a GameObject behaves, refer to the appropriate file
				in the game_objects documentation directory.
				
			2.	Checks if the player isDead() or isDestroyed(), and sets the local isDead property
				accordingly
				
			3.	Checks if the player has received a new target room through its getRoom() method
				If the value is not null, the player has received a new target room and the current
				Room.java instance will set its local targetRoom property accordingly
				
			4.	Calls the fetchVisibleObjects() method:
			
					Loops through all background objects and checks for visibility
						If object is visible, append objectImage to list
			
					Loops through all regions and checks for visibility
						If object is visible, append objectImage to list
						
					Loops through all solidObjects and checks for visibility
						If object is visible, append objectImage to list
						The player object is located in this list and should always be visible
						
					Check if the player has a heldItem, if not, add the Sword.java instance's
					objectImage
					
					Loop through all items and check for visibility
						If object is visible, append objectImage to list
						
					Loop through all projectiles and check for visibility
						If object is visible, append objectImage to list
			
					Loops through all foreground objects and checks for visibility
						If object is visible, append objectImage to list
				
		OTHER NOTES
		
		This object also receives KeyEvents from the parent class Main.java. The method names of the
		corresponding objects are self-explanatory such that comments and documentation are totally
		unnecessary if you actually read through the code, however, here is an explanation anyways:
		
		UP ARROW Key:
			Trigger/Stop player's climbUp method
			
		DOWN ARROW Key:
			Trigger/Stop player's keyDown method (both sprint and "climbDown")
			
		LEFT ARROW Key:
			Trigger/Stop player's walk() method in a leftward direction
			
		RIGHT ARROW Key:
			Trigger/Stop player's walk() method in a rightward direction
			
		"Z" Key:
			Trigger/Stop player's jump() method
			
		"X" Key:
			If in dialogue:
				trigger dialogueHandler's advance method
			Else:
				trigger player's interaact() method
			